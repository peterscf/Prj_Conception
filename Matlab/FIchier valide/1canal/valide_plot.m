%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/floriant/Prj_conception/Matlab/FIchier valide/sorties_Q_MOD.dat
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/06/20 16:39:21

%% Initialize variables.
clear;
filename1 = './sorties_Q_MOD.dat';
%filename2 = './sorties_comparator.dat';
filename3 = './sorties_cordic.dat';
filename4 = './sorties_I_MOD.dat';
filename5 = './modu_out_I.txt';
filename6 = './modu_out_Q.txt';
filename7 = './phi_out.txt';
filename8 = './sorties_I_DEMOD.dat';
filename9 = './sorties_Q_DEMOD.dat';
filename10 = './I_out.txt';
filename11 = './Q_out.txt';
delimiter = '';
delimiter2 =',';

%% Format for each line of text:
%   column1: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec2 = '%f%f%[^\n\r]';
formatSpec = '%f%[^\n\r]';
%% Open the text file.
fileID1 = fopen(filename1,'r');
%fileID2 = fopen(filename2,'r');
fileID3 = fopen(filename3,'r');
fileID4 = fopen(filename4,'r');
fileID5 = fopen(filename5,'r');
fileID6 = fopen(filename6,'r');
fileID7 = fopen(filename7,'r');
fileID8 = fopen(filename8,'r');
fileID9 = fopen(filename9,'r');
fileID10 = fopen(filename10,'r');
fileID11 = fopen(filename11,'r');
%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray1 = textscan(fileID1, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);
%dataArray2 = textscan(fileID2, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);
dataArray3 = textscan(fileID3, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);
dataArray4 = textscan(fileID4, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);
dataArray5 = textscan(fileID5, formatSpec2, 'Delimiter', delimiter2, 'EmptyValue' ,NaN, 'ReturnOnError', false);
dataArray6 = textscan(fileID6, formatSpec2, 'Delimiter', delimiter2, 'EmptyValue' ,NaN, 'ReturnOnError', false);
dataArray7 = textscan(fileID7, formatSpec2, 'Delimiter', delimiter2, 'EmptyValue' ,NaN, 'ReturnOnError', false);
dataArray8 = textscan(fileID8, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);
dataArray9 = textscan(fileID9, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);
dataArray10 = textscan(fileID10, formatSpec2, 'Delimiter', delimiter2, 'EmptyValue' ,NaN, 'ReturnOnError', false);
dataArray11 = textscan(fileID11, formatSpec2, 'Delimiter', delimiter2, 'EmptyValue' ,NaN, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID1);
%fclose(fileID2);
fclose(fileID3);
fclose(fileID4);
fclose(fileID5);
fclose(fileID6);
fclose(fileID7);
fclose(fileID8);
fclose(fileID9);
fclose(fileID10);
fclose(fileID11);
%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
Q_MOD = dataArray1{:, 1};
%Compt_out= dataArray2{:, 1};
CORDIC_out = dataArray3{:, 1};
I_MOD = dataArray4{:, 1};
I_MOD_MAT = dataArray5{:,2};
Q_MOD_MAT = dataArray6{:,2};
CORDIC_MAT = dataArray7{:,2};
I_DEMOD_out = dataArray8{:, 1};
Q_DEMOD_out = dataArray9{:, 1};
I_DEMOD_MAT = dataArray10{:, 2};
Q_DEMOD_MAT = dataArray11{:, 2};
%% Clear temporary variables
clearvars filename1 filename2 filename3 filename4 filename5 filename6 filename7 filename8 filename9 filename10 filename11 delimiter delimiter2 formatSpec formatSpec2 fileID1 fileID2 fileID3 fileID4 fileID5 fileID6 fileID7 fileID8 fileID9 fileID10 fileID11 dataArray1 dataArray2 dataArray3 dataArray4 dataArray5 dataArray6 dataArray7 dataArray8 dataArray9 dataArray10 dataArray11 ans;

for T =1:50001
   time(T,1)=T*20e-9;
end
clear figure;
I_MOD=I_MOD./(2^5);
Q_MOD=Q_MOD./(2^5);

I_DEMOD_out= I_DEMOD_out ./ (2^7);
Q_DEMOD_out= Q_DEMOD_out ./ (2^7);

plot(time(1:2001),I_DEMOD_out(1:2001),time(1:2001),I_DEMOD_MAT(1:2001))
title('Verif I DEMOD')
legend('I DEMOD Design','I DEMOD Matlab')
xlabel('time') 
ylabel('value of I DEMOD') 
grid on 

figure
plot(time(1:2001),-(I_DEMOD_out(20:2020)),time(1:2001),I_DEMOD_MAT(1:2001))
title('Verif I DEMOD after correction')
legend('I DEMOD Design','I DEMOD Matlab')
xlabel('time') 
ylabel('value of Q DEMOD') 
grid on


figure
plot(time(1:2001),Q_DEMOD_out(1:2001),time(1:2001),Q_DEMOD_MAT(1:2001))
title('Verif Q DEMOD')
legend('Q DEMOD Design','Q DEMOD Matlab')
xlabel('time') 
ylabel('value of Q DEMOD') 
grid on

figure
plot(time(1:2001),-(Q_DEMOD_out(20:2020)),time(1:2001),Q_DEMOD_MAT(1:2001))
title('Verif Q DEMOD after correction')
legend('Q DEMOD Design','Q DEMOD Matlab')
xlabel('time') 
ylabel('value of Q DEMOD') 
grid on

figure
plot(time(1:2001),I_MOD(1:2001),time(1:2001),I_MOD_MAT(1:2001))
title('Verif I MOD')
legend('I MOD Design','I MOD Matlab')
xlabel('time') 
ylabel('value of I MOD') 
grid on 


figure
plot(time(1:2001),Q_MOD(1:2001),time(1:2001),Q_MOD_MAT(1:2001))
title('Verif Q MOD')
legend('Q MOD Design','Q MOD Matlab')
xlabel('time') 
ylabel('value of Q MOD') 
grid on 

figure
plot(time(1:2001),CORDIC_out(15:2015),time(1:2001),CORDIC_MAT(5:2005));
title('Verif CORDIC')
legend('CORDIC Design','CORDIC Matlab')
xlabel('time') 
ylabel('value of Q DEMOD') 
grid on 
%plot(time(1:40001),CORDIC_MAT(5:40005));

U_CORDIC_out=unwrap(deg2rad(CORDIC_out));
U_CORDIC_MAT=unwrap(deg2rad(CORDIC_MAT));
U_CORDIC_out = rad2deg(U_CORDIC_out);
U_CORDIC_MAT = rad2deg(U_CORDIC_MAT);
figure
plot(time(1:40001),U_CORDIC_out(15:40015),time(1:40001),U_CORDIC_MAT(5:40005));
title('Verif CORDIC after unwrap on Matlab')
legend('CORDIC Design','CORDIC Matlab')
xlabel('time') 
ylabel('value of CORDIC') 
grid on 
%plot(time(1:40001),U_CORDIC_MAT(5:40005));

figure
U_CORDIC_out = U_CORDIC_out - 135;
plot(time(1:40001),U_CORDIC_out(18:40018), time(1:40001),U_CORDIC_MAT(5:40005));
title('Verif CORDIC after unwrap and correction of 135° on Matlab')
legend('CORDIC Design','CORDIC Matlab')
xlabel('time') 
ylabel('value of CORDIC') 
grid on 
%plot(time(1:40001),U_CORDIC_MAT(5:40005));

dev = U_CORDIC_MAT(15:40005)-U_CORDIC_out(28:40018);
devmax= max (abs(dev))
devmoy= mean(abs(dev))
%plot(dev,'.')
figure
[counts, binValues] = hist(dev);
normalizedCounts = 100 * counts / sum(counts);
bar(binValues, normalizedCounts, 'barwidth', 1);
xlabel('Déviation angulaire (°)');
ylabel('Occurence normalisée (%)');
title('derivation en sortie')

grid on
